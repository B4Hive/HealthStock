@startuml HealthStock

' Classes de Domínio (Estoque)
class Fornecedor {
  - id : int
  - nome : String
  - cnpj : String
  - telefone : String
  - endereco : String
  - email : String
  + {static} carregar(fornecedorCSV: String) : Fornecedor
  + salvar() : String
}

class Produto {
  # id : int
  # nome : String
  # quantidade : int
  # idFornecedor : int
  # setor : String
  + toCSV() : String
  + {static} fromCSV(values: String[]) : Produto
  + clone(novaQuantidade: int) : Produto
}

class Medicacao {
  - lote : String
  - validade : Date
  - ultimoResponsavel : String
  - dataUltimoResponsavel : Date
  + verificarValidade() : boolean
  + atualizarResponsavel(responsavel: String) : void
  + toCSV() : String
  + {static} fromCSV(values: String[]) : Medicacao
}

' Classes de Domínio (Setor)
class Pedido {
  - id : int
  - setorSolicitante : String
  - setorResponsavel : String
  - dataPedido : Date
  - produto : String
  - quantidade : int
  - estado : String
  - detalhes : String
  + {static} carregar(linhaCsv: String) : Pedido
  + salvar() : String
}

class Setor {
  # nome : String
  - senha : String
  + validarSenha(senha: String) : boolean
  + {static} carregar(nomeSetor: String) : Setor
  + criarPedido(pedido: Pedido) : void
  + aprovarPedido(pedido: Pedido, aprovado: boolean) : void
  + listarPedidos() : List<Pedido>
  + entradaProduto(produto: Produto) : void
  + retiradaProduto(id: int, quantidade: int) : Produto
  + consumirProduto(id: int, quantidade: int) : void
  + getProdutos() : List<Produto>
  + getProduto(id: int) : Produto
}

class SetorEntrada {
  + entradaProduto(produto: Produto) : void
}

class SetorCadastro {
  + cadastroFornecedor(nome: String, ...): void
  + getFornecedores() : List<Fornecedor>
  + getFornecedor(id: int) : Fornecedor
  + cadastroProduto(nome: String, ...): void
  + retiradaProduto(id: int, quantidade: int) : Produto
}

' Classes de Serviço e Utilitários
class PersistenceService {
  - {static} PRODUTOS_CSV : String
  - {static} PEDIDOS_FILE : String
  + {static} carregarProdutos(filtro: Predicate) : List<Produto>
  + {static} salvarProdutos(todosProdutos: List<Produto>) : void
  + {static} salvarProduto(produto: Produto) : void
  + {static} removerProduto(produto: Produto) : void
  + {static} getNextPedidoId() : int
  + {static} carregarPedidos(predicate: Predicate) : List<Pedido>
  + {static} salvarPedido(pedido: Pedido) : void
  + {static} salvarPedidos(pedidos: List<Pedido>) : void
}

class Auxiliar {
  + {static} SETOR_MEDICACAO : String
  + {static} SETOR_ENTRADA : String
  + {static} SETOR_CADASTRO : String
  + {static} SDF : SimpleDateFormat
  + {static} path(...) : String
  + {static} checkFile(file: File) : void
  + {static} error(message: String) : void
  + {static} encrypt(setor: String, senha: String) : String
}


' Relacionamentos
Produto <|-- Medicacao
Setor <|-- SetorEntrada
Setor <|-- SetorCadastro

Setor ..> PersistenceService : usa
Pedido ..> PersistenceService : usa
SetorCadastro ..> Fornecedor : gerencia
Produto "1" -- "1" Fornecedor : é fornecido por

note top of SetorCadastro
  Setor de compras, responsável
  pelo cadastro de produtos e
  fornecedores.
end note

note bottom of SetorEntrada
  Almoxarifado, ponto central
  de recebimento de produtos.
end note

@enduml